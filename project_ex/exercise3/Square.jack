

/** Implements a graphical square. */
class Square {

   field int x, y; // screen location of the square's top-left corner
   field int size; // length of this square, in pixels

   /** Constructs a new square with a given location and size. */
   constructor Square new(int Ax, int Ay, int Asize) {
      let x = Ax;
      let y = Ay;
      let size = Asize;
      do show();
      return this;
   }

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }
/** Returns the x. */
    method int getX() {
        return x;
    }

    /** Returns the y. */
    method int getY() {
        return y;
    }
	  /** Returns the size. */
    method int getSize() {
        return size;
    }
	/** set x*/
	 method void setX(int Ax) {
        let x=Ax;
		return;
    }

    /** set y */
    method void setY(int Ay) {
        let y=Ay;
		return;
    }
	  /** set the size. */
    method void setSize(int Asize) {
        let size=Asize;
		return;
    }
	/** draw the square*/
	method void draw()
	{
		do Screen.drawRectangle(x, y, x + size, y + size);
		return;
	}
   /** show the square on the screen. -draw it black*/
   method void show() {
      do Screen.setColor(true);
      do draw();
      return;
   }

   /** Erases the square from the screen. -draw it white*/
   method void erase() {
      do Screen.setColor(false);
      do draw();
      return;
   }



      /** Moves the square up by 2 pixels. */
   method void moveUp() {
      if (y > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let y = y - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + size, y + 1);
      }
      return;
   }

   /** Moves the square down by 2 pixels. */
   method void moveDown() {
      if ((y + size) < 254) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
      }
      return;
   }

   /** Moves the square left by 2 pixels. */
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 1, y + size);
      }
      return;
   }

   /** Moves the square right by 2 pixels. */
   method void moveRight() {
      if ((x + size) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 1, y + size);
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
      }
      return;
   }
   
   /** move the obstacle squares down*/
   method void move(){
	if ((y + size) < 254) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
      }
	  else
	  {
		do Screen.setColor(false);
		do Screen.drawRectangle(x, y, x + size, y + size);
		do Screen.setColor(true);
		let y=0;
		do Screen.drawRectangle(x, y, x + size, y + size);
      }
      return;
   }


}
